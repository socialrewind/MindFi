using System;
using Shell32;
using System.IO;
using System.ComponentModel;
using System.Runtime.InteropServices;
using System.Threading;
using MBBetaAPI.AgentAPI;
 
namespace MBBetaAPI
{
    public class SRZipBackup
    {
        /// <summary>
        /// Creates a Zip from a full backup folder
        /// </summary>
        /// <param name="SourcePath">Folder to compress</param>
        /// <param name="Destination">Destination zip file</param>
        public static void CreateZipBackup(string SourcePath, string Destination)
        {
            DBLayer.LockDatabaseForCopy();
            BackgroundWorker bw = new BackgroundWorker();
            bw.DoWork += new System.ComponentModel.DoWorkEventHandler(bw_ZipFolder);
            AsyncZipArgs temp = new AsyncZipArgs(SourcePath, Destination);
            bw.RunWorkerAsync(temp);
        }

        private static void bw_ZipFolder(object sender, DoWorkEventArgs e)
        {
            BackgroundWorker worker = sender as BackgroundWorker;
            AsyncZipArgs temp = (AsyncZipArgs)e.Argument;

            ShellCompressFolder(temp.Source, temp.Destination);
            // only when finished...
            DBLayer.UnlockDatabaseForCopy();
        }

        // sample from http://social.msdn.microsoft.com/Forums/en/netfxbcl/thread/b409dc2b-397c-44cd-b3a6-377066c591a9
        // ese also http://www.codeproject.com/Articles/34165/How-to-Utilise-the-Shell32-Library-in-NET-as-a-COM
        public static void ShellCompressFolder(string Source, string Dest)
        {
            Shell Shl = new Shell();
            // standard zip header
            File.WriteAllBytes(Dest, new byte[] { 80, 75, 5, 6, 0, 0, 0, 0, 0, 0, 0, 
                                                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 });

            string errorMessage;
            int errorCode1, errorCode2;

            try { 
                // http://msdn.microsoft.com/en-us/library/windows/desktop/bb787866(v=vs.85).aspx
                //Shl.NameSpace(Dest).CopyHere(Source, 0);

                errorCode1 = Marshal.GetLastWin32Error();

                Folder temp = Shl.NameSpace(Dest);
                temp.CopyHere(Source, 512); // flag to create
                bool Cancelled = false; 
                // make sure file is created
                FolderItems x;
                // byte[] getdata;
                
                // allow rampup time
                Thread.Sleep(4000);
                do
                {
                    Thread.Sleep(1000);
                    x = temp.Items();
                    // HACK: Access the file to know if zip is cancelled...
                    try
                    {
                        //getdata = File.ReadAllBytes(Dest);
                        FileStream tempStream = File.OpenWrite(Dest);
                        Cancelled = true;
                        tempStream.Close();
                    }
                    catch ( Exception ex )
                    {
                        // TODO: check exception is the expected exception, if not, "cancel"
                    }
                    errorCode2 = Marshal.GetLastWin32Error();
                } while (x.Count == 0 
                    && (errorCode2 == errorCode1 
                    || errorCode2 == 32) // generated by the planned exception
                    && !Cancelled);
                if (!File.Exists(Dest))
                {
                    Cancelled = true;
                } else if (x.Count != 0)
                {
                    Cancelled = false;
                }
                if (Cancelled)
                {
                    File.Delete(Dest);
                }
                if (errorCode1 != errorCode2)
                {
                    System.Diagnostics.Debug.WriteLine("Error creating zip " + errorCode2);
                }
            }
            catch ( Exception ex )
            { 
                System.Diagnostics.Debug.WriteLine(ex.ToString());
            } 
        }
 
    }

    public class AsyncZipArgs
    {
        public string Source;
        public string Destination;

        public AsyncZipArgs(string source, string dest)
        {            
            Source = source;
            Destination = dest;
        }
    }
}
